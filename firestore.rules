rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isDirOrSuper() {
      return request.auth.token.role in ['diretoria', 'superintendencia'];
    }

    // --- Collection Rules ---

    match /users/{userId} {
      // READ: Hierarchical read access. Users can read their own data.
      allow read: if isDirOrSuper() ||
                     (request.auth.token.role == 'gerencia_regional' && resource.data.state == getUserData().state) ||
                     (request.auth.token.role == 'comercial' && resource.data.city == getUserData().city) ||
                     request.auth.uid == userId;

      // UPDATE: Admins can update any user. Users can only update specific, non-critical fields on their OWN profile.
      allow update: if isDirOrSuper() ||
                       (request.auth.uid == userId && 
                        request.resource.data.role == resource.data.role &&
                        request.resource.data.state == resource.data.state &&
                        request.resource.data.city == resource.data.city);

      // CREATE/DELETE: Only top-level admins can create/delete users directly. (Creation is normally handled by a Cloud Function).
      allow create, delete: if request.auth.token.role == 'diretoria';
    }

    match /contracts/{contractId} {
      // READ: Hierarchical read access based on role and location. 'operacional' can only read their own.
      allow read: if isDirOrSuper() ||
                     (request.auth.token.role == 'gerencia_regional' && resource.data.state == getUserData().state) ||
                     (request.auth.token.role == 'comercial' && resource.data.city == getUserData().city) ||
                     (resource.data.userId == request.auth.uid);

      // CREATE: A user can create a contract, but it must be assigned to them and be within their geographical scope.
      allow create: if request.resource.data.userId == request.auth.uid &&
                       (isDirOrSuper() || 
                        request.resource.data.state == getUserData().state) &&
                       (isDirOrSuper() || 
                        request.resource.data.city == getUserData().city);

      // UPDATE: Admins can update any contract. The assigned user can update it, but cannot re-assign it.
      allow update: if isDirOrSuper() ||
                       (resource.data.userId == request.auth.uid && request.resource.data.userId == resource.data.userId);

      // DELETE: Only top-level admins can delete contracts.
      allow delete: if request.auth.token.role == 'diretoria';
    }

    match /goals/{goalId} {
      // READ: Hierarchical read access, same as contracts.
      allow read: if isDirOrSuper() ||
                     (request.auth.token.role == 'gerencia_regional' && resource.data.state == getUserData().state) ||
                     (request.auth.token.role == 'comercial' && resource.data.city == getUserData().city) ||
                     (resource.data.userId == request.auth.uid);

      // CREATE: Hierarchical creation. A manager can create a goal for their geographical scope.
      allow create: if isDirOrSuper() ||
                       (request.auth.token.role == 'gerencia_regional' && request.resource.data.state == getUserData().state) ||
                       (request.auth.token.role == 'comercial' && request.resource.data.city == getUserData().city);

      // UPDATE: Admins can update. The assigned user can update progress, but not change the goal's core attributes.
      allow update: if isDirOrSuper() ||
                       (resource.data.userId == request.auth.uid &&
                        request.resource.data.description == resource.data.description &&
                        request.resource.data.targetValue == resource.data.targetValue &&
                        request.resource.data.month == resource.data.month);
                        
      // DELETE: Only top-level admins can delete goals.
      allow delete: if request.auth.token.role == 'diretoria';
    }

    // Rules for the 'audit_logs' collection
    match /audit_logs/{logId} {
      // READ: Only admins can read the audit logs.
      allow read: if isDirOrSuper();

      // CREATE: Any authenticated user can create a log entry (as they perform actions).
      allow create: if request.auth != null;

      // UPDATE, DELETE: Nobody can ever change or delete logs, ensuring integrity.
      allow update, delete: if false;
    }

    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
      // A user can only read or delete their own notifications.
      allow read, delete: if request.auth.uid == resource.data.userId;

      // A user can only update the 'isRead' field on their own notifications.
      allow update: if request.auth.uid == resource.data.userId &&
                       request.resource.data.keys().hasOnly(['isRead']);

      // Notifications are only created by the backend (Cloud Functions).
      allow create: if false;
    }
  }
}