rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the requesting user's data document from the 'users' collection
    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    // Helper function to check if a user has an admin-level role
    function isAdmin() {
      return request.auth.token.role in ['diretoria', 'superintendencia'];
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Read access is hierarchical
      allow read: if isAdmin() ||
                     (request.auth.token.role == 'gerencia_regional' && resource.data.state == getUserData(request.auth.uid).state) ||
                     (request.auth.token.role == 'comercial' && resource.data.city == getUserData(request.auth.uid).city) ||
                     request.auth.uid == userId;

      // Update access is hierarchical
      allow update: if isAdmin() ||
                       (request.auth.token.role == 'gerencia_regional' && resource.data.state == getUserData(request.auth.uid).state) ||
                       (request.auth.token.role == 'comercial' && resource.data.city == getUserData(request.auth.uid).city) ||
                       request.auth.uid == userId;

      // Only top-level admin ('diretoria') can create or delete users
      allow create, delete: if request.auth.token.role == 'diretoria';
    }

    // Rules for the 'contracts' collection
    match /contracts/{contractId} {
      // Read access is hierarchical
      allow read: if isAdmin() ||
                     (request.auth.token.role == 'gerencia_regional' && resource.data.state == getUserData(request.auth.uid).state) ||
                     (request.auth.token.role == 'comercial' && resource.data.city == getUserData(request.auth.uid).city) ||
                     (request.auth.token.role == 'operacional' && resource.data.userId == request.auth.uid);

      // Any authenticated user can create a contract
      allow create: if request.auth != null;

      // Admins can update anything. 'operacional' can only update validation fields.
      allow update: if isAdmin() ||
                       (request.auth.token.role == 'operacional' && request.resource.data.keys().hasOnly(['validated', 'validation_notes']));

      // Only top-level admin ('diretoria') can delete contracts
      allow delete: if request.auth.token.role == 'diretoria';
    }

    // Rules for the 'goals' collection
    match /goals/{goalId} {
      // Read access is hierarchical
      allow read: if isAdmin() ||
                     (request.auth.token.role == 'gerencia_regional' && resource.data.state == getUserData(request.auth.uid).state) ||
                     (request.auth.token.role == 'comercial' && resource.data.city == getUserData(request.auth.uid).city) ||
                     (request.auth.token.role == 'operacional' && resource.data.userId == request.auth.uid);

      // Write access is hierarchical. Assumes the goal doc has state/city fields.
      allow write: if isAdmin() ||
                      (request.auth.token.role == 'gerencia_regional' && request.resource.data.state == getUserData(request.auth.uid).state) ||
                      (request.auth.token.role == 'comercial' && request.resource.data.city == getUserData(request.auth.uid).city);
    }

    // There is no 'relatorios' collection. Reports are generated from other collections.
    // The rules for 'contracts' will apply when generating reports.
  }
}
